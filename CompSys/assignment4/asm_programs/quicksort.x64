.pos 0x0
start:
    movq $8, %r15           // init incrementer
    movq dim, %rsp          // init stack pointer
    subq %r15, %rsp

    call main          
    hlt
    
main:
    movq data, %rdi         // %rdi = start address of array

    movq %rdi, %rdx         // %rdx = low index

    movq $0, %r13
    movq dim(%r13), %rcx    // %rcx = high index + 1 (dim)
    mulq %r15, %rcx         // multiply index by 8
    addq %rdi, %rcx         // add array pointer address
    subq %r15, %rcx         // subtract 8 to get the correct 0-indexed index 

    movq %rcx, %r12         // store a copy of the index for printing
    
    call quicksort
    call send_to_out
    ret

// Quicksort
// Recursively sorts an array using quicksort algorithm.
// Arguments for quicksort are:
// %rdi = pointer to array
// %rdx = low index
// %rcx = high index
// Variables used in quicksort:
// %rax = index of pivot returned from partition
quicksort:
    cmpq %rcx, %rdx  
    jge qs_ret              // if low < high continue sorting

    call partition

    pushq %rcx              // push low and high to the stack since they might be
    pushq %rdx              // altered before returning from the recursion

    movq %rax, %rcx  
    subq %r15, %rcx         // %rcx = high = p - 1

    call quicksort          // called with indices: low = low, high = p - 1

    popq %rdx               // restore low and high from stack
    popq %rcx

    movq %rax, %rdx         
    addq %r15, %rdx         // %rdx = low = p + 1

    call quicksort          // called with indices: low = p + 1, high = high

qs_ret:
    ret

// Partition 
// Splits a subarray to two smaller subarrays 
// using the last element in the array as a pivot. 
// It works in place meaning the values are swapped around,
// and no extra memory is needed.
// Arguments for partition are similar to quicksort
// Variables used in partition:
// %r8  = value of pivot element
// %r9  = index i
// %r10 = index j
// %r11 = temporary register for values being swapped
// %rbp = temporary register for memory lookups
// %r15 = globally set 8-byte de-/incrementer
// %rax = return register - function returns index of pivot after split
partition:
    movq (%rcx), %r8        // %r8 = pivot     (=arr[hi])

    movq %rdx, %r9       
    subq %r15, %r9          // %r9 = lo - 1    (= i)
    movq %r9, %r10          // %r10 = lo -1    (= j)

part_loop:
    addq %r15, %r10         // j++
    cmpq %rcx, %r10         // if j < high continue loop
    jge part_end

    movq (%r10),%rbp 
    cmpq %r8, %rbp          // if arr[j] < pivot swap values
    jge part_loop

    addq %r15, %r9          // i++

    // swapping
    movq (%r10), %r11       // tmp = arr[j]
    movq (%r9), %rbp
    movq %rbp, (%r10)       // arr[j] = arr[i]         
    movq %r11, (%r9)        // arr[i] = tmp     

    jmp part_loop 

part_end:
    addq %r15, %r9          // i++

    movq (%r9),%rbp
    cmpq %rbp, %r8          // if pivot < arr[i+1] set pivot correctly 
    jge part_ret
     
    // swapping
    movq (%rcx),%r11        // tmp = arr[hi]
    movq (%r9),%rbp
    movq %rbp, (%rcx)       // arr[hi] = arr[i+1]
    movq %r11, (%r9)        // arr[i] = tmp

part_ret:
    movq %r9, %rax          // return i+1
    ret

// Send to out function
// Because this implementation of quicksort works in place,
// it's not obvious from the memory diff dump that the array was sorted correctly.
// Therefore, after sorting the array, we write it to the out positions,
// forcing every number to be printed in the memory diff dump in the correct order.
send_to_out:
    movq %rdi, %rbx
    movq out, %r13
send_loop:
    movq (%rbx), %r14
    movq %r14, (%r13)

    addq %r15, %rbx
    addq %r15, %r13

    cmpq %r12, %rbx
    jle send_loop

    ret

// Set encoding position to 1000 for the "input"-data
// The memory behind this position will contain the instructions and the stack
    .pos 0x1000	
dim:	 
    .quad 1000
data:
    .rand 1234 1000 1
// Set position for out data (printing the result)
    .pos 0x20000
out:
